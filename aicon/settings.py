"""
Django settings for aicon project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from environs import Env

env = Env()
env.read_env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", [])

CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", [])

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'crispy_forms',
    "crispy_bootstrap4",
    "bootstrap4",
    'bootstrap_datepicker_plus',
    'fontawesome_5',
    'rest_framework',
    'rest_framework.authtoken',
    'rules.apps.AutodiscoverRulesConfig',
    'app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'aicon.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'app.context_processors.announcements',
            ],
        },
    },
]

WSGI_APPLICATION = 'aicon.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

with env.prefixed("DATABASE_"):
    DATABASE_SQLITE = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": env.str("SQLITE_DB", os.path.join(BASE_DIR, 'db.sqlite3')),
    }

    DATABASE_MYSQL = {
        "ENGINE": "django.db.backends.mysql",
        "HOST": env.str("MYSQL_HOST"),
        "PORT": env.int("MYSQL_PORT", 3306),
        "NAME": env.str("MYSQL_NAME"),
        "USER": env.str("MYSQL_USER"),
        "PASSWORD": env.str("MYSQL_PASSWORD"),
    }

    DATABASE_BACKEND = {
        'mysql': DATABASE_MYSQL,
        'sqlite': DATABASE_SQLITE,
    }

    DATABASES = {
        'default': DATABASE_BACKEND[env.str("BACKEND", 'sqlite')]
    }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = env.str("TIME_ZONE", 'Asia/Singapore')

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'assets'),
]

# Auth

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Messages

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# Crispy form

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
CRISPY_TEMPLATE_PACK = "bootstrap4"

# Authentication backends

AUTHENTICATION_BACKENDS = (
    'rules.permissions.ObjectPermissionBackend',
    'django.contrib.auth.backends.ModelBackend',
)

# Upload

MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')

# Django Rest Framework

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'PAGE_SIZE': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    )
}

# Celery settings

with env.prefixed("CELERY_BROKER_"):
    CELERY_BROKER_TRANSPORT = env.str("TRANSPORT")
    CELERY_BROKER_USER = env.str("USER")
    CELERY_BROKER_PASSWORD = env.str("PASSWORD")
    CELERY_BROKER_HOST = env.str("HOST")
    CELERY_BROKER_PORT = env.int("PORT", 5672)

# Template files

SUBMISSION_BASE_ZIPFILE = os.path.join(BASE_DIR, "uploads", "base", "submission.zip")
SUBMISSION_BASE_MAIN_DIR = "aicon_submission"
SUBMISSION_BASE_MAIN_FILE = os.path.join(SUBMISSION_BASE_MAIN_DIR, "__init__.py")

TASK_BASE_ZIPFILE = os.path.join(BASE_DIR, "uploads", "base", "task.zip")
TASK_BASE_MAIN_DIR = "aicon_task"
TASK_BASE_MAIN_FILE = os.path.join(TASK_BASE_MAIN_DIR, "__init__.py")
TASK_BASE_SETUP_FILE = "setup.py"

# Email

with env.prefixed("EMAIL_"):
    EMAIL_HOST = env.str("HOST")
    EMAIL_PORT = env.int("PORT")
    EMAIL_HOST_USER = env.str("HOST_USER")
    EMAIL_HOST_PASSWORD = env.str("HOST_PASSWORD")
    EMAIL_USE_TLS = env.bool("USE_TLS")
    EMAIL_USE_SSL = env.bool("USE_SSL")
    DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
