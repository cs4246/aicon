"""
Django settings for aicon project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from dotenv import load_dotenv
load_dotenv(verbose=True)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['cs4246.comp.nus.edu.sg', 'cs4246-i.comp.nus.edu.sg', 'cs5446.comp.nus.edu.sg', 'cs5446-i.comp.nus.edu.sg', '127.0.0.1']

CSRF_TRUSTED_ORIGINS = ['https://cs4246.comp.nus.edu.sg', 'https://cs4246-i.comp.nus.edu.sg', 'https://cs5446.comp.nus.edu.sg', 'https://cs5446-i.comp.nus.edu.sg']

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'crispy_forms',
    "crispy_bootstrap4",
    "bootstrap4",
    'bootstrap_datepicker_plus',
    'fontawesome_5',
    'rest_framework',
    'rest_framework.authtoken',
    'app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'aicon.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'app.context_processors.announcements',
            ],
        },
    },
]

WSGI_APPLICATION = 'aicon.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASE_SQLITE = {
    "ENGINE": "django.db.backends.sqlite3",
    "NAME": os.getenv("DATABASE_SQLITE_DB", os.path.join(BASE_DIR, 'db.sqlite3')),
}

DATABASE_MYSQL = {
    "ENGINE": "django.db.backends.mysql",
    "HOST": os.getenv("DATABASE_MYSQL_HOST"),
    "PORT": int(os.getenv("DATABASE_MYSQL_PORT", 3306)),
    "NAME": os.getenv("DATABASE_MYSQL_NAME"),
    "USER": os.getenv("DATABASE_MYSQL_USER"),
    "PASSWORD": os.getenv("DATABASE_MYSQL_PASSWORD"),
}

DATABASE_BACKEND = {
    'mysql': DATABASE_MYSQL,
    'sqlite': DATABASE_SQLITE,
}

DATABASES = {
    'default': DATABASE_BACKEND[os.getenv("DATABASE_BACKEND", 'sqlite')]
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Singapore'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Auth

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Messages

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# Crispy form

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"

CRISPY_TEMPLATE_PACK = "bootstrap4"

# Permissions

ROLES_COURSE_UPDATE            = ['ADM']
ROLES_COURSE_DELETE            = ['ADM']
ROLES_COURSE_LIST              = ['GUE', 'STU', 'TA', 'LEC', 'ADM']
ROLES_COURSE_JOIN              = ['GUE']
ROLES_TASK_LIST                = ['STU', 'TA', 'LEC', 'ADM']
ROLES_TASK_CREATE              = ['TA', 'LEC', 'ADM']
ROLES_TASK_UPDATE              = ['TA', 'LEC', 'ADM']
ROLES_TASK_DELETE              = ['LEC', 'ADM']
ROLES_TASK_DOWNLOAD            = ['LEC', 'ADM', 'TA']
ROLES_TASK_DOWNLOAD_TEMPLATE   = ['STU', 'LEC', 'ADM', 'TA']
ROLES_SUBMISSION_DOWNLOAD      = ['LEC', 'ADM', 'TA']
ROLES_SUBMISSION_DOWNLOAD_SELF = ['STU', 'LEC', 'ADM', 'TA']
ROLES_SUBMISSION_LIST          = ['LEC', 'ADM', 'TA']
ROLES_SUBMISSION_LIST_SELF     = ['STU', 'LEC', 'ADM', 'TA']
ROLES_SUBMISSION_DETAIL        = ['LEC', 'ADM', 'TA']
ROLES_SUBMISSION_DETAIL_SELF   = ['STU', 'LEC', 'ADM', 'TA']
ROLES_SUBMISSION_CREATE        = ['STU', 'LEC', 'ADM', 'TA']
ROLES_SUBMISSION_UPDATE        = ['LEC', 'ADM', 'TA']
ROLES_SUBMISSION_UPDATE_SELF   = ['STU', 'LEC', 'ADM', 'TA']
ROLES_SUBMISSION_RUN           = ['LEC', 'ADM', 'TA']
ROLES_SUBMISSION_RUN_SELF      = ['LEC', 'ADM', 'TA']
ROLES_LEADERBOARD              = ['LEC', 'ADM', 'TA']
ROLES_LEADERBOARD_SELF         = ['STU', 'LEC', 'ADM', 'TA']
ROLES_LEADERBOARD_DOWNLOAD     = ['LEC', 'ADM', 'TA']
ROLES_STATS                    = ['LEC', 'ADM', 'TA']
ROLES_SIMILARITIES             = ['LEC', 'ADM', 'TA']
ROLES_SIMILARITY_LIST          = ['LEC', 'ADM', 'TA']
ROLES_INVITATION_LIST          = ['LEC', 'ADM']
ROLES_INVITATION_CREATE        = ['ADM']
ROLES_INVITATION_UPDATE        = ['ADM']
ROLES_INVITATION_DELETE        = ['ADM']

ROLES = {
    'course.list': ROLES_COURSE_LIST,
    'course.update': ROLES_COURSE_UPDATE,
    'course.delete': ROLES_COURSE_DELETE,
    'course.join': ROLES_COURSE_JOIN,
    'invitation.list': ROLES_INVITATION_LIST,
    'invitation.create': ROLES_INVITATION_CREATE,
    'invitation.update': ROLES_INVITATION_CREATE,
    'invitation.delete': ROLES_INVITATION_DELETE,
    'task.list': ROLES_TASK_LIST,
    'task.create': ROLES_TASK_CREATE,
    'task.update': ROLES_TASK_UPDATE,
    'task.delete': ROLES_TASK_DELETE,
    'task.download': ROLES_TASK_DOWNLOAD,
    'task.download.template': ROLES_TASK_DOWNLOAD_TEMPLATE,
    'submission.download': ROLES_SUBMISSION_DOWNLOAD,
    'submission.download.self': ROLES_SUBMISSION_DOWNLOAD_SELF,
    'submission.list': ROLES_SUBMISSION_LIST,
    'submission.list.self': ROLES_SUBMISSION_LIST_SELF,
    'submission.detail': ROLES_SUBMISSION_DETAIL,
    'submission.detail.self': ROLES_SUBMISSION_DETAIL_SELF,
    'submission.create': ROLES_SUBMISSION_CREATE,
    'submission.update': ROLES_SUBMISSION_UPDATE,
    'submission.update.self': ROLES_SUBMISSION_UPDATE_SELF,
    'submission.run': ROLES_SUBMISSION_RUN,
    'submission.run.self': ROLES_SUBMISSION_RUN_SELF,
    'leaderboard': ROLES_LEADERBOARD,
    'leaderboard.self': ROLES_LEADERBOARD_SELF, # if task enables leaderboard
    'leaderboard.download': ROLES_LEADERBOARD_DOWNLOAD,
    'stats': ROLES_STATS,
    'similarity.list': ROLES_SIMILARITY_LIST,
}

GROUPS = {
    'course.create': ['Lecturer']
}

# Upload

MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')

# Django Rest Framework

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'PAGE_SIZE': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    )
}

# Celery settings
CELERY_BROKER_TRANSPORT = os.getenv("CELERY_BROKER_TRANSPORT")
CELERY_BROKER_USER = os.getenv("CELERY_BROKER_USER")
CELERY_BROKER_PASSWORD = os.getenv("CELERY_BROKER_PASSWORD")
CELERY_BROKER_HOST = os.getenv("CELERY_BROKER_HOST")
CELERY_BROKER_PORT = os.getenv("CELERY_BROKER_PORT")

# Template files
SUBMISSION_BASE_ZIPFILE = os.path.join(BASE_DIR, "uploads", "base", "submission.zip")
SUBMISSION_BASE_MAIN_DIR = "aicon_submission"
SUBMISSION_BASE_MAIN_FILE = os.path.join(SUBMISSION_BASE_MAIN_DIR, "__init__.py")

TASK_BASE_ZIPFILE = os.path.join(BASE_DIR, "uploads", "base", "task.zip")
TASK_BASE_MAIN_DIR = "aicon_task"
TASK_BASE_MAIN_FILE = os.path.join(TASK_BASE_MAIN_DIR, "__init__.py")
TASK_BASE_SETUP_FILE = "setup.py"
